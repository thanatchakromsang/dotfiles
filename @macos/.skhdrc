# ################################################################ #
# THE FOLLOWING IS AN EXPLANATION OF THE GRAMMAR THAT SKHD PARSES. #
# FOR SIMPLE EXAMPLE MAPPINGS LOOK FURTHER DOWN THIS FILE..        #
# ################################################################ #

# A list of all built-in modifier and literal keywords can
# be found at https://github.com/koekeishiya/skhd/issues/1
#
# A hotkey is written according to the following rules:
#
#   hotkey       = <mode> '<' <action> | <action>
#
#   mode         = 'name of mode' | <mode> ',' <mode>
#
#   action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                  <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                  <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#   keysym       = <mod> '-' <key> | <key>
#
#   mod          = 'modifier keyword' | <mod> '+' <mod>
#
#   key          = <literal> | <keycode>
#
#   literal      = 'single letter or built-in keyword'
#
#   keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#   proc_map_lst = * <proc_map>
#
#   proc_map     = <string> ':' <command> | <string>     '~' |
#                  '*'      ':' <command> | '*'          '~'
#
#   string       = '"' 'sequence of characters' '"'
#
#   command      = command is executed through '$SHELL -c' and
#                  follows valid shell syntax. if the $SHELL environment
#                  variable is not set, it will default to '/bin/bash'.
#                  when bash is used, the ';' delimeter can be specified
#                  to chain commands.
#
#                  to allow a command to extend into multiple lines,
#                  prepend '\' at the end of the previous line.
#
#                  an EOL character signifies the end of the bind.
#
#   ->           = keypress is not consumed by skhd
#
#   *            = matches every application not specified in <proc_map_lst>
#
#   ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
# A mode is declared according to the following rules:
#
#   mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#               '::' <name> '@'               | '::' <name>
#
#   name      = desired name for this mode,
#
#   @         = capture keypresses regardless of being bound to an action
#
#   command   = command is executed through '$SHELL -c' and
#               follows valid shell syntax. if the $SHELL environment
#               variable is not set, it will default to '/bin/bash'.
#               when bash is used, the ';' delimeter can be specified
#               to chain commands.
#
#               to allow a command to extend into multiple lines,
#               prepend '\' at the end of the previous line.
#
#               an EOL character signifies the end of the bind.

# ############################################################### #
# THE FOLLOWING SECTION CONTAIN SIMPLE MAPPINGS DEMONSTRATING HOW #
# TO INTERACT WITH THE YABAI WM. THESE ARE SUPPOSED TO BE USED AS #
# A REFERENCE ONLY, WHEN MAKING YOUR OWN CONFIGURATION..          #
# ############################################################### #

# Open terminal
cmd - return : open -a kitty

# Destroy desktop
cmd + ctrl - w : yabai -m space --destroy

# focus window
cmd - h : yabai -m window --focus west \
    || ((yabai -m display --focus prev || yabai -m display --focus last) \
        && yabai -m window --focus last)
cmd - j : yabai -m window --focus south
cmd - k : yabai -m window --focus north
cmd - l : yabai -m window --focus east \
    || ((yabai -m display --focus next || yabai -m display --focus first) \
        && yabai -m window --focus first)

cmd - left : yabai -m window --focus west \
    || ((yabai -m display --focus prev || yabai -m display --focus last) \
        && yabai -m window --focus last)
cmd - down : yabai -m window --focus south
cmd - up : yabai -m window --focus north
cmd - right : yabai -m window --focus east \
    || ((yabai -m display --focus next || yabai -m display --focus first) \
        && yabai -m window --focus first)

# move managed window

cmd + shift - h : yabai -m window --warp west
cmd + shift - j : yabai -m window --warp south
cmd + shift - k : yabai -m window --warp north
cmd + shift - l : yabai -m window --warp east

cmd + shift - left : yabai -m window --warp west
cmd + shift - down : yabai -m window --warp south
cmd + shift - up : yabai -m window --warp north
cmd + shift - right : yabai -m window --warp east

# balance size of windows
# shift + cmd - 0 : yabai -m space --balance

# make floating window fill screen
# shift + cmd - up     : yabai -m window --grid 1:1:0:0:1:1

# make floating window fill left-half of screen
# shift + cmd - left   : yabai -m window --grid 1:2:0:0:1:1

# create desktop and follow focus - uses jq for parsing json (brew install jq)
cmd + alt - n : yabai -m space --create && \
                 index="$(yabai -m query --spaces --display | jq 'map(select(."native-fullscreen" == 0))[-1].index')" && \
                 yabai -m space --focus "${index}"

# Move current window to workspace
cmd + shift - 1 : yabai -m window --space 1; # yabai -m space --focus 1
cmd + shift - 2 : yabai -m window --space 2; # yabai -m space --focus 2
cmd + shift - 3 : yabai -m window --space 3; # yabai -m space --focus 3
cmd + shift - 4 : yabai -m window --space 4; # yabai -m space --focus 4
cmd + shift - 5 : yabai -m window --space 5; # yabai -m space --focus 5
cmd + shift - 6 : yabai -m window --space 6; # yabai -m space --focus 6
cmd + shift - 7 : yabai -m window --space 7; # yabai -m space --focus 7
cmd + shift - 8 : yabai -m window --space 8; # yabai -m space --focus 8
cmd + shift - 9 : yabai -m window --space 9; # yabai -m space --focus 9

# Cycle between spaces in current display using '[' and ']'
# alt - 0x1E : index="$(yabai -m query --spaces --display | jq '.[$(yabai -m query --spaces --display | jq 'map(select(.visible == 1))[].index')+1].index')" && \
#               yabai -m space --focus "${index}"

cmd - 0x1E : yabai -m space --focus next || yabai -m space --focus first
cmd - 0x21 : yabai -m space --focus prev || yabai -m space --focus last

# Switch workspace
cmd - 1 : yabai -m space --focus 1
cmd - 2 : yabai -m space --focus 2
cmd - 3 : yabai -m space --focus 3
cmd - 4 : yabai -m space --focus 4
cmd - 5 : yabai -m space --focus 5
cmd - 6 : yabai -m space --focus 6
cmd - 7 : yabai -m space --focus 7
cmd - 8 : yabai -m space --focus 8
cmd - 9 : yabai -m space --focus 9

# fast focus desktop
# cmd + cmd - x : yabai -m space --focus recent
# cmd + cmd - 1 : yabai -m space --focus 1

# send window to desktop and follow focus
# shift + cmd - z : yabai -m window --space next; yabai -m space --focus next
# shift + cmd - 2 : yabai -m window --space  2; yabai -m space --focus 2

# focus monitor
cmd - m  : yabai -m display --focus recent
# send window to monitor and follow focus
# ctrl + cmd - c  : yabai -m window --display next; yabai -m display --focus next
# ctrl + cmd - 1  : yabai -m window --display 1; yabai -m display --focus 1

# move floating window
# shift + ctrl - a : yabai -m window --move rel:-20:0
# shift + ctrl - s : yabai -m window --move rel:0:20

# increase window size
# shift + alt - a : yabai -m window --resize left:-20:0
# shift + alt - w : yabai -m window --resize top:0:-20

# decrease window size
# shift + cmd - s : yabai -m window --resize bottom:0:-20
# shift + cmd - w : yabai -m window --resize top:0:20

# set insertion point in focused container
# ctrl + alt - h : yabai -m window --insert west

# toggle window zoom
# alt - d : yabai -m window --toggle zoom-parent
cmd - f : yabai -m window --toggle zoom-fullscreen

# toggle window split type
cmd - e : yabai -m window --toggle split

# float / unfloat window and center on screen
cmd + shift - return : yabai -m window --toggle float;\
          yabai -m window --grid 4:4:1:1:2:2

# toggle sticky(+float), topmost, picture-in-picture
# cmd - p : yabai -m window --toggle sticky;\
#           yabai -m window --toggle topmost;\
#           yabai -m window --toggle pip
