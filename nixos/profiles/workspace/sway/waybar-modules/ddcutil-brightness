#!/usr/bin/env python3

import argparse
import json
import subprocess


# TODO: return list of all serial
def get_serial_number() -> str:
    cmd = ["swaymsg", "-r", "-t", "get_outputs"]
    sway_outputs = subprocess.run(cmd, stdout=subprocess.PIPE).stdout.decode("utf8")
    for obj in json.loads(sway_outputs):
        if obj["focused"] == True:
            return obj["serial"]
    return ""


def get_brightness_percent(serial: str) -> int:
    waybar_output = {}
    cmd = [
        "ddcutil",
        "getvcp",
        "10",
        "--sn",
        serial,
        "--maxtries",
        ".,15,.",
    ]
    # output looks like this in my case: VCP code 0x10 (Brightness                    ): current value =    20, max value =   100
    try:
        value = subprocess.run(cmd, stdout=subprocess.PIPE).stdout.decode("utf8")
        current_brightness_percent = int(
            value.split(":")[1].split(",")[0].split("=")[1].strip(" ")
        )

        # cache json in case subprocess failed to call ddcutil
        waybar_output["percentage"] = current_brightness_percent
        json_output = json.dumps(waybar_output)

        print(json_output)

        f = open(f"/tmp/dccutil-brightness-cache-{serial}.txt", "w")
        f.write(str(current_brightness_percent))
    except:
        f = open(f"/tmp/dccutil-brightness-cache-{serial}.txt", "r")
        current_brightness_percent = int(f.read())
        waybar_output["percentage"] = current_brightness_percent
        json_output = json.dumps(waybar_output)
        print(json_output)

    return current_brightness_percent


# TODO: loop change brightness
def change_brightness(serial: str, brightness_multiplier: float):
    waybar_output = {}
    current_brightness_percent = get_brightness_percent(serial)
    next_brightness_percent = str(
        100
        if int(current_brightness_percent * brightness_multiplier) > 100
        else int(current_brightness_percent * brightness_multiplier)
    )
    cmd = [
        "ddcutil",
        "setvcp",
        "10",
        next_brightness_percent,
        "--sn",
        serial,
        "--maxtries",
        "15,.,.",
    ]
    subprocess.run(cmd, stdout=subprocess.PIPE)
    waybar_output["percentage"] = int(next_brightness_percent)
    print(json.dumps(waybar_output))


# def increase_brightness(serial: str):
#     change_brightness(serial, 1.4)


# def decrease_brightness(serial: str):
#     change_brightness(serial, 0.72)

parser = argparse.ArgumentParser(
    description="Hello",
    formatter_class=argparse.ArgumentDefaultsHelpFormatter,
)
parser.add_argument(
    "-m",
    "--multiplier",
    help="Multiply brightness by value (can be a non-whole number)",
)
parser.add_argument(
    "-c", "--current-brightness", action="store_true", help="Get current brightness"
)
# parser.add_argument(
#     "-s",
#     "--serial-number",
#     required=True,
#     help="Display serial number from dccutil detect or swaymsg outputs",
# )
args = parser.parse_args()
config = vars(args)

# serial = config["serial_number"]
serial = get_serial_number()

if config["current_brightness"]:
    get_brightness_percent(serial)
else:
    change_brightness(serial, float(config["multiplier"]))
